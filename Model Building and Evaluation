# --- Final Phase: Model Building and Evaluation ---

# Import necessary libraries for model building, including train/test split and linear regression.
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# Drop any remaining non-numeric columns and the 'laptop_ID' column before modeling.
# 'Product' and 'Screen_Resolution_Dimension' are also dropped as they are not suitable for the model.
df_final = df.drop(columns=['laptop_ID', 'Product', 'Screen_Resolution_Dimension'], errors='ignore')

# Separate the features (X) and the target variable (y), which is 'Price_euros'.
X = df_final.drop('Price_euros', axis=1)
y = df_final['Price_euros']

# Split the data into training and testing sets. 80% for training, 20% for testing.
# 'random_state' is set for reproducibility.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=41)

# Print the sizes of the training and testing sets.
print(f"Training set size: {X_train.shape[0]} samples")
print(f"Testing set size: {X_test.shape[0]} samples")

# Initialize the Linear Regression model.
model = LinearRegression()

# Train the model on the training data.
model.fit(X_train, y_train)

# Make predictions on the test data using the trained model.
y_pred = model.predict(X_test)

# --- Model Evaluation ---
# Evaluate the model's performance using key regression metrics: MAE, MSE, RMSE, and R-squared.
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse) # Calculate Root Mean Squared Error
r2 = r2_score(y_test, y_pred) # Calculate R-squared

# Print the evaluation metrics.
print("\nModel Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): {mae:.2f} euros")
print(f"Mean Squared Error (MSE): {mse:.2f} euros^2")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f} euros")
print(f"R-squared (R2): {r2:.2f}")

# --- Interpretation of R-squared ---
# Provide a brief explanation of what R-squared means in this context.
print("\nInterpretation of R-squared (R2):")
print("R-squared represents the proportion of the variance in the target variable (Price_euros)")
print("that is predictable from the features. An R-squared of 0.85, for example, means that")
print("85% of the variability in the price can be explained by our model's features.")
print("A value closer to 1.0 is better.")
